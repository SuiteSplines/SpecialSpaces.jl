var documenterSearchIndex = {"docs":
[{"location":"#SpecialSpaces","page":"Home","title":"SpecialSpaces","text":"","category":"section"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Base.eltype-Union{Tuple{Type{S}}, Tuple{S}, Tuple{T}, Tuple{Dim}} where {Dim, T<:Integer, S<:(VectorSplineSpaceConstraints{Dim, <:Any, T})}","page":"Home","title":"Base.eltype","text":"Base.eltype(::Type{S}) where {Dim,T<:Integer,S<:VectorSplineSpaceConstraints{Dim,<:Any,T}}\n\nReturn element type of VectorSplineSpaceConstraints collection.\n\n\n\n\n\n","category":"method"},{"location":"#Base.eltype-Union{Tuple{Type{S}}, Tuple{S}, Tuple{T}} where {T<:Integer, S<:(ScalarSplineSpaceConstraints{<:Any, T})}","page":"Home","title":"Base.eltype","text":"Base.eltype(::Type{S}) where {T<:Integer,S<:ScalarSplineSpaceConstraints{<:Any,T}}\n\nReturn element type of ScalarSplineSpaceConstraints collection.\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Union{Tuple{S}, Tuple{S, Int64}} where S<:VectorFunctionSpace","page":"Home","title":"Base.getindex","text":"Base.getindex(V::S, i::Int64) where {S<:VectorFunctionSpace}\n\nReturn ith vector function space component.\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Union{Tuple{T}, Tuple{ScalarSplineSpaceConstraints, T}} where T<:Integer","page":"Home","title":"Base.getindex","text":"Base.getindex(C::ScalarSplineSpaceConstraints, i::T) where {T<:Integer}\n\nReturn ith component constraints in a ScalarSplineSpaceConstraints\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Union{Tuple{T}, Tuple{VectorSplineSpaceConstraints, T}} where T<:Integer","page":"Home","title":"Base.getindex","text":"Base.getindex(C::ScalarSplineSpaceConstraints, i::T) where {T<:Integer}\n\nReturn ith component constraints in a VectorSplineSpaceConstraints\n\n\n\n\n\n","category":"method"},{"location":"#Base.iterate-Tuple{ScalarSplineSpaceConstraints}","page":"Home","title":"Base.iterate","text":"Base.iterate(C::ScalarSplineSpaceConstraints)\nBase.iterate(C::ScalarSplineSpaceConstraints, i::T) where {T<:Integer} = iterate(C.data, i)\n\nIterate of the collection of UnivariateSplineSpaceConstraints stored in ScalarSplineSpaceConstraints.\n\n\n\n\n\n","category":"method"},{"location":"#Base.iterate-Tuple{S} where S<:VectorFunctionSpace","page":"Home","title":"Base.iterate","text":"Base.iterate(V::S) where {S<:VectorFunctionSpace} = iterate(parent(V))\nBase.iterate(V::S, i::Int) where {S<:VectorFunctionSpace} = iterate(parent(V), i)\n\nIterate over vector function space components.\n\n\n\n\n\n","category":"method"},{"location":"#Base.iterate-Tuple{VectorSplineSpaceConstraints}","page":"Home","title":"Base.iterate","text":"Base.iterate(C::VectorSplineSpaceConstraints)\nBase.iterate(C::VectorSplineSpaceConstraints, i::T) where {T<:Integer} = iterate(C.data, i)\n\nIterate of the collection of ScalarSplineSpaceConstraints stored in VectorSplineSpaceConstraints.\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Tuple{S} where S<:VectorFunctionSpace","page":"Home","title":"Base.length","text":"Base.length(V::S) where {S<:VectorFunctionSpace}\n\nReturn the number of vector function space components.\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Union{Tuple{ScalarSplineSpaceConstraints{Dim}}, Tuple{Dim}} where Dim","page":"Home","title":"Base.length","text":"Base.length(C::ScalarSplineSpaceConstraints{Dim}) where {Dim}\n\nReturn number of dimensions Dim.\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Union{Tuple{VectorSplineSpaceConstraints{<:Any, Codim}}, Tuple{Codim}} where Codim","page":"Home","title":"Base.length","text":"Base.length(C::VectorSplineSpaceConstraints{<:Any,Codim}) where {Codim}\n\nReturn number of dimensions Dim.\n\n\n\n\n\n","category":"method"},{"location":"#IgaBase.dimension-Tuple{CartesianProducts.TensorProduct{Dim, UnivariateSplines.SplineSpace{T}} where {Dim, T}}","page":"Home","title":"IgaBase.dimension","text":"dimensions(V::ScalarSplineSpace)\n\nReturn the dimension of a ScalarSplineSpace.\n\n\n\n\n\n","category":"method"},{"location":"#IgaBase.dimension-Tuple{T} where T<:MixedFunctionSpace","page":"Home","title":"IgaBase.dimension","text":"IgaBase.dimension(V::T) where {T<:MixedFunctionSpace}\n\nReturn the dimension of a mixed function space.\n\n\n\n\n\n","category":"method"},{"location":"#IgaBase.dimension-Tuple{T} where T<:VectorFunctionSpace","page":"Home","title":"IgaBase.dimension","text":"IgaBase.dimension(V::T) where {T<:VectorFunctionSpace}\n\nReturn the dimension of a vector function space.\n\n\n\n\n\n","category":"method"},{"location":"#IgaBase.dimension-Union{Tuple{T}, Tuple{T, Int64}} where T<:VectorFunctionSpace","page":"Home","title":"IgaBase.dimension","text":"IgaBase.dimension(V::T, k::Int) where {T<:VectorFunctionSpace}\n\nReturn the dimension of the ith component of a vector function space.\n\n\n\n\n\n","category":"method"},{"location":"#IgaBase.dimension-Union{Tuple{T}, Tuple{T, Symbol, Int64}} where T<:MixedFunctionSpace","page":"Home","title":"IgaBase.dimension","text":"IgaBase.dimension(V::T, field::Symbol, i::Int64) where {T<:MixedFunctionSpace}\n\nReturn the dimension of the ith component of a vector function space field in a mixed space V.\n\n\n\n\n\n","category":"method"},{"location":"#IgaBase.dimension-Union{Tuple{T}, Tuple{T, Symbol}} where T<:MixedFunctionSpace","page":"Home","title":"IgaBase.dimension","text":"IgaBase.dimension(V::T, field::Symbol) where {T<:MixedFunctionSpace}\n\nReturn the dimension of a scalar function space field in a mixed space V.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.dimensions-Tuple{CartesianProducts.TensorProduct{Dim, UnivariateSplines.SplineSpace{T}} where {Dim, T}}","page":"Home","title":"SpecialSpaces.dimensions","text":"dimensions(V::ScalarSplineSpace)\n\nReturn the dimension of a ScalarSplineSpace in each tensor-product direction as a tuple.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.dimensions-Tuple{T} where T<:MixedFunctionSpace","page":"Home","title":"SpecialSpaces.dimensions","text":"dimensions(V::T) where {T<:MixedFunctionSpace}\n\nReturn the dimension in each tensor-product direction of a mixed function space as a tuple.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.dimensions-Tuple{T} where T<:VectorFunctionSpace","page":"Home","title":"SpecialSpaces.dimensions","text":"dimensions(V::T) where {T<:VectorFunctionSpace}\n\nReturn the dimension in each tensor-product direction of a vector function space as a tuple.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.dimensions-Union{Tuple{T}, Tuple{T, Int64}} where T<:VectorFunctionSpace","page":"Home","title":"SpecialSpaces.dimensions","text":"dimensions(V::T, i::Int64) where {T<:VectorFunctionSpace}\n\nReturn the dimension in each tensor-product direction of the ith component of a vector function space as a tuple.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.dimensions-Union{Tuple{T}, Tuple{T, Symbol, Int64}} where T<:MixedFunctionSpace","page":"Home","title":"SpecialSpaces.dimensions","text":"dimensions(V::T, field::Symbol, i::Int64) where {T<:MixedFunctionSpace}\n\nReturn the dimension in each tensor-product direction of the ith component of a vector function space field in the mixed space V as a tuple.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.dimensions-Union{Tuple{T}, Tuple{T, Symbol}} where T<:MixedFunctionSpace","page":"Home","title":"SpecialSpaces.dimensions","text":"dimensions(V::T, field::Symbol, i::Int64) where {T<:MixedFunctionSpace}\n\nReturn the dimension in each tensor-product direction of the vector function space field in the mixed space V as a tuple.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.extraction_operator-Tuple{CartesianProducts.TensorProduct{Dim, UnivariateSplines.SplineSpace{T}} where {Dim, T}}","page":"Home","title":"SpecialSpaces.extraction_operator","text":"extraction_operator(S::ScalarSplineSpace; sparse::Bool=false)\n\nReturn the extraction operator for a scalar function space.\n\nIf sparse is true, return a sparse matrix.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.extraction_operator-Union{Tuple{T}, Tuple{T, Symbol}} where T<:MixedFunctionSpace","page":"Home","title":"SpecialSpaces.extraction_operator","text":"extraction_operator(S::T, field::Symbol; sparse::Bool=false) where {T<:MixedFunctionSpace}\n\nReturn the extraction operator for a scalar function space field in  mixed function space S.\n\nIf sparse is true, return a sparse matrix.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.extraction_operators-Tuple{T} where T<:VectorFunctionSpace","page":"Home","title":"SpecialSpaces.extraction_operators","text":"extraction_operators(S::T; sparse::Bool=false) where {T<:VectorFunctionSpace}\n\nReturn the extraction operator for a vector function space.\n\nIf sparse is true, return a tuple of sparse matrices.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.extraction_operators-Union{Tuple{T}, Tuple{T, Symbol}} where T<:MixedFunctionSpace","page":"Home","title":"SpecialSpaces.extraction_operators","text":"extraction_operators(S::T, field::Symbol; sparse::Bool=false) where {T<:MixedFunctionSpace}\n\nReturn the extraction operators for a vector function space field in  mixed function space S in a tuple.\n\nIf sparse is true, return a tuple of sparse matrices.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.getcoeffs-Tuple{AbstractMappings.Field{<:Any, 1}}","page":"Home","title":"SpecialSpaces.getcoeffs","text":"getcoeffs(f::Field)\ngetcoeffs(f::GeometricMapping)\n\nReturn a vector of vertically concatenated (tensor-product Bspline) mapping coefficients.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.indices-Tuple{CartesianProducts.TensorProduct{Dim, UnivariateSplines.SplineSpace{T}} where {Dim, T}}","page":"Home","title":"SpecialSpaces.indices","text":"indices(V::ScalarSplineSpace)\n\nReturn linear indices for a scalar function space.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.indices-Tuple{S} where S<:VectorFunctionSpace","page":"Home","title":"SpecialSpaces.indices","text":"indices(space::S) where {S<:VectorFunctionSpace}\n\nReturn linear indices for a vector function space.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.indices-Union{Tuple{S}, Tuple{S, Int64}} where S<:VectorFunctionSpace","page":"Home","title":"SpecialSpaces.indices","text":"indices(space::S, i::Int) where {S<:VectorFunctionSpace}\n\nReturn linear indices for ith component of a vector function space.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.indices-Union{Tuple{S}, Tuple{S, Symbol, Int64}} where S<:MixedFunctionSpace","page":"Home","title":"SpecialSpaces.indices","text":"indices(space::S, field::Symbol, i::Int) where {S<:MixedFunctionSpace}\n\nReturn linear indices for ith component of a vector function space field in mixed function space space.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.indices-Union{Tuple{S}, Tuple{S, Symbol}} where S<:MixedFunctionSpace","page":"Home","title":"SpecialSpaces.indices","text":"indices(space::S, field::Symbol) where {S<:MixedFunctionSpace}\n\nReturn linear indices for a function space field in mixed function space space.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.left_constraint!-Tuple{ScalarSplineSpaceConstraints}","page":"Home","title":"SpecialSpaces.left_constraint!","text":"left_constraint!(C::ScalarSplineSpaceConstraints; c::Vector{Int}=Int[1], dim::Int)\n\nPush c to vector in left field of UnivariateSplineSpaceConstraints stored at index dim in ScalarSplineSpaceConstraints.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.periodic_constraint!-Tuple{ScalarSplineSpaceConstraints}","page":"Home","title":"SpecialSpaces.periodic_constraint!","text":"periodic_constraint!(C::ScalarSplineSpaceConstraints; c::Vector{Int}, dim::Int)\n\nPush c to vector in periodic field of UnivariateSplineSpaceConstraints stored at index dim in ScalarSplineSpaceConstraints.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.right_constraint!-Tuple{ScalarSplineSpaceConstraints}","page":"Home","title":"SpecialSpaces.right_constraint!","text":"right_constraint!(C::ScalarSplineSpaceConstraints; c::Vector{Int}=Int[1], dim::Int)\n\nPush c to vector in right field of UnivariateSplineSpaceConstraints stored at index dim in ScalarSplineSpaceConstraints.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.setcoeffs!-Union{Tuple{T}, Tuple{M}, Tuple{M, Vector{T}}, Tuple{M, Vector{T}, Int64}, Tuple{M, Vector{T}, Int64, UnitRange{Int64}}} where {M<:IgaBase.AbstractMapping, T<:Real}","page":"Home","title":"SpecialSpaces.setcoeffs!","text":"setcoeffs!(f::M, v::Vector{T}, k::Int=1, slice::Base.UnitRange{Int}=Base.UnitRange(1,length(v))) where {M<:AbstractMapping,T<:Real}\n\nSet coefficients of a mapping component to a slice of coefficients in a vector.\n\nArguments:\n\nf: mapping in question\nv: vector with coeffs\nslice: range of indices of vector v\nk: component of field f \n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.setcoeffs!-Union{Tuple{T}, Tuple{S}, Tuple{M}, Tuple{M, S, Symbol, Vector{T}}} where {M<:IgaBase.AbstractMapping, S<:SpecialSpaces.MixedSplineSpace, T<:Real}","page":"Home","title":"SpecialSpaces.setcoeffs!","text":"setcoeffs!(f::M, mixedspace::S, field::Symbol, v::Vector{T}) where {M<:AbstractMapping,S<:MixedSplineSpace,T<:Real}\n\nSet coefficients of a mapping defined on a mixedspace.\n\nArguments:\n\nf: mapping in question\nmixedspace: space\nfield: space field\nv: vector with coeffs with length dim(mixedspace)\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.setcoeffs!-Union{Tuple{T}, Tuple{S}, Tuple{M}, Tuple{M, S, Vector{T}}} where {M<:IgaBase.AbstractMapping, S<:(CartesianProducts.TensorProduct{Dim, UnivariateSplines.SplineSpace{T}} where {Dim, T}), T<:Real}","page":"Home","title":"SpecialSpaces.setcoeffs!","text":"setcoeffs!(f::M, scalarspace::S, v::Vector{T}) where {M<:AbstractMapping,S<:ScalarSplineSpace,T<:Real}\n\nSet coefficients of a mapping defined on a scalar space.\n\nArguments:\n\nf: mapping in question\nscalarspace: space\nv: vector with coeffs with length dim(scalarspace)\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.setcoeffs!-Union{Tuple{T}, Tuple{S}, Tuple{M}, Tuple{M, S, Vector{T}}} where {M<:IgaBase.AbstractMapping, S<:VectorSplineSpace, T<:Real}","page":"Home","title":"SpecialSpaces.setcoeffs!","text":"setcoeffs!(f::M, vectorspace::S, v::Vector{T}) where {M<:AbstractMapping,S<:VectorSplineSpace,T<:Real}\n\nSet coefficients of a mapping defined on a vector space.\n\nArguments:\n\nf: mapping in question\nvectorspace: space\nv: vector with coeffs with length dim(vectorspace)\n\n\n\n\n\n","category":"method"},{"location":"#AbstractMappings.Field-Tuple{S} where S<:(CartesianProducts.TensorProduct{Dim, UnivariateSplines.SplineSpace{T}} where {Dim, T})","page":"Home","title":"AbstractMappings.Field","text":"Field(space::S) where {S<:ScalarSplineSpace}\nField(space::S) where {S<:VectorSplineSpace}\nField(space::S, s::Symbol) where {S<:MixedSplineSpace}\n\nConstruct field on some spline spaces.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractMappings.GeometricMapping-Tuple{Any, VectorSplineSpace}","page":"Home","title":"AbstractMappings.GeometricMapping","text":"AbstractMappings.GeometricMapping(domain, args::ScalarScalarSpace; orientation::Int=1)\nAbstractMappings.GeometricMapping(domain, args::VectorSplineSpace; orientation::Int=1)\nAbstractMappings.GeometricMapping(domain, args::MixedSplineSpace, field::Symbol; orientation::Int=1)\n\nConstruct geometric mapping on some spline spaces.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.Domain","page":"Home","title":"SpecialSpaces.Domain","text":"const Domain{Dim,T} = CartesianProduct{Dim,Tuple{Vararg{T,Dim}},Tuple{Vararg{Interval{T},Dim}}}\n\nAlias for CartesianProduct of Interval defining a domain.\n\n\n\n\n\n","category":"type"},{"location":"#SpecialSpaces.MixedFunctionSpace","page":"Home","title":"SpecialSpaces.MixedFunctionSpace","text":"abstract type MixedFunctionSpace{Dim,T}\n\nMixed spaces like MixedSplineSpace subtype this.\n\nMixed function spaces are expected to collect components as struct fields.\n\n\n\n\n\n","category":"type"},{"location":"#SpecialSpaces.MixedSplineSpace","page":"Home","title":"SpecialSpaces.MixedSplineSpace","text":"abstract type MixedSplineSpace{Dim,T} <: MixedFunctionSpace{Dim,T}\n\nConcrete mixed spaces like RaviartThomas subtype this.\n\n\n\n\n\n","category":"type"},{"location":"#SpecialSpaces.MixedSplineSpaceConstraints","page":"Home","title":"SpecialSpaces.MixedSplineSpaceConstraints","text":"const MixedSplineSpaceConstraints\n\nType alias for NamedTuple which serves as a container for mixed space constraints.\n\n\n\n\n\n","category":"type"},{"location":"#SpecialSpaces.MixedSplineSpaceConstraints-Union{Tuple{RaviartThomas{Dim}}, Tuple{Dim}} where Dim","page":"Home","title":"SpecialSpaces.MixedSplineSpaceConstraints","text":"MixedSplineSpaceConstraints(S::RaviartThomas{Dim}) where {Dim}\n\nConstruct a constraints container for RaviartThomas.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.MixedSplineSpaceConstraints-Union{Tuple{TaylorHood{Dim}}, Tuple{Dim}} where Dim","page":"Home","title":"SpecialSpaces.MixedSplineSpaceConstraints","text":"MixedSplineSpaceConstraints(S::RaviartThomas{Dim}) where {Dim}\n\nConstruct a constraints container for TaylorHood.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.Partition","page":"Home","title":"SpecialSpaces.Partition","text":"const Partition{Dim,T} = CartesianProduct{Dim,Tuple{Vararg{T,Dim}},Tuple{Vararg{IncreasingRange{T},Dim}}}\n\nAlias for CartesianProduct defining a partition.\n\n\n\n\n\n","category":"type"},{"location":"#SpecialSpaces.Partition-Union{Tuple{CartesianProducts.TensorProduct{Dim, UnivariateSplines.SplineSpace{T}}}, Tuple{T}, Tuple{Dim}} where {Dim, T<:Real}","page":"Home","title":"SpecialSpaces.Partition","text":"Partition(S::ScalarSplineSpace{Dimt,T})\n\nReturn the partition corresponding to a ScalarSplineSpace.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.Partition-Union{Tuple{S}, Tuple{T}, Tuple{Dim}, Tuple{S, NTuple{Dim, Int64}}} where {Dim, T<:Real, S<:CartesianProducts.CartesianProduct{Dim, NTuple{Dim, T}, NTuple{Dim, SortedSequences.Interval{T}}}}","page":"Home","title":"SpecialSpaces.Partition","text":"Partition(domain::S, n::NTuple{Dim, Int64}) where {Dim,T<:Real,S<:Domain{Dim,T}}\n\nReturn an uniform Partition of Domain with nₖ breakpoints in kth dimension.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.RaviartThomas","page":"Home","title":"SpecialSpaces.RaviartThomas","text":"struct RaviartThomas{Dim,T} <: MixedSplineSpace{Dim,T}\n\nStructure preserving pair of spline spaces for velocities and pressure in two and three dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#SpecialSpaces.RaviartThomas-Union{Tuple{T}, Tuple{Dim}, Tuple{Integer, CartesianProducts.CartesianProduct{Dim, NTuple{Dim, T}, NTuple{Dim, S}} where S<:SortedSequences.IncreasingSequence{T}}} where {Dim, T<:Real}","page":"Home","title":"SpecialSpaces.RaviartThomas","text":"RaviartThomas(p::Degree, Δ::Partition{Dim,T}) where {Dim,T<:Real}\nRaviartThomas(p::Degree, Δ::Partition{2,T}, C::MixedSplineSpaceConstraints{(:V,:Q)})\nRaviartThomas(p::Degree, Δ::Partition{3,T}, C::MixedSplineSpaceConstraints{(:V,:Q)}) where {T<:Real}\n\nConstruct a RaviartThomas mixed spline space.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.ScalarSplineSpace","page":"Home","title":"SpecialSpaces.ScalarSplineSpace","text":"Type alias for a tensor-product SplineSpace.\n\n\n\n\n\n","category":"type"},{"location":"#SpecialSpaces.ScalarSplineSpace-Union{Tuple{T}, Tuple{Dim}, Tuple{NTuple{Dim, Integer}, CartesianProducts.CartesianProduct{Dim, NTuple{Dim, T}, NTuple{Dim, S}} where S<:SortedSequences.IncreasingSequence{T}, ScalarSplineSpaceConstraints{Dim}}} where {Dim, T<:Real}","page":"Home","title":"SpecialSpaces.ScalarSplineSpace","text":"ScalarSplineSpace(S::ScalarSplineSpace{Dim,T}) where {Dim,T<:Real}\nScalarSplineSpace(p::Degree, partition::Partition{Dim,T}) where {Dim,T<:Real}\nScalarSplineSpace(degrees::NTuple{Dim,Degree}, partition::Partition{Dim,T}) where {Dim,T<:Real}\nScalarSplineSpace(degrees::NTuple{Dim,Degree}, partition::Partition{Dim,T}, C::ScalarSplineSpaceConstraints{Dim}) where {Dim,T<:Real}\nScalarSplineSpace(S::ScalarSplineSpace{Dim,T}, C::ScalarSplineSpaceConstraints{Dim}) where {Dim,T<:Real}\n\nConstruct a ScalarSplineSpace.\n\nIf constructed from another ScalarSplineSpace, discard constraint conditions.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.ScalarSplineSpaceConstraints","page":"Home","title":"SpecialSpaces.ScalarSplineSpaceConstraints","text":"struct ScalarSplineSpaceConstraints{Dim,T}\n\nContainer for ScalarSplineSpace constraints.\n\nField data stores a tuple of UnivariateSplineSpaceConstraints for each tensor-product dimension of ScalarSplineSpace.\n\n\n\n\n\n","category":"type"},{"location":"#SpecialSpaces.ScalarSplineSpaceConstraints-Union{Tuple{F}, Tuple{Dim}} where {Dim, F<:(CartesianProducts.TensorProduct{Dim, UnivariateSplines.SplineSpace{T}} where T)}","page":"Home","title":"SpecialSpaces.ScalarSplineSpaceConstraints","text":"ScalarSplineSpaceConstraints(::F) where {Dim,F<:ScalarSplineSpace{Dim}}\n\nConstruct a constraints container for a ScalarSplineSpace.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.ScalarSplineSpaceConstraints-Union{Tuple{}, Tuple{Dim}} where Dim","page":"Home","title":"SpecialSpaces.ScalarSplineSpaceConstraints","text":"ScalarSplineSpaceConstraints{Dim}() where {Dim}\nScalarSplineSpaceConstraints{Dim,T}() where {Dim,T<:Integer}\n\nConstruct default ScalarSplineSpaceConstraints for a ScalarSplineSpace of dimension Dim.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.TaylorHood","page":"Home","title":"SpecialSpaces.TaylorHood","text":"struct TaylorHood{Dim,T} <: MixedSplineSpace{Dim,T}\n\nAn inf-sup stable pair of spline spaces for velocities and pressure in two and three dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#SpecialSpaces.TaylorHood-Union{Tuple{T}, Tuple{Dim}, Tuple{Integer, CartesianProducts.CartesianProduct{Dim, NTuple{Dim, T}, NTuple{Dim, S}} where S<:SortedSequences.IncreasingSequence{T}, NamedTuple{(:V, :Q)}}} where {Dim, T<:Real}","page":"Home","title":"SpecialSpaces.TaylorHood","text":"TaylorHood(p::Degree, Δ::Partition{Dim,T}) where {Dim,T<:Real}\nTaylorHood(p::Degree, Δ::Partition{Dim,T}, C::MixedSplineSpaceConstraints{(:V,:Q)}) where {Dim,T<:Real}\n\nConstruct a TaylorHood mixed spline space.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.UnivariateSplineSpaceConstraints","page":"Home","title":"SpecialSpaces.UnivariateSplineSpaceConstraints","text":"struct UnivariateSplineSpaceConstraints{T}\n\nContainer for SplineSpace constraints, i.e. cl, cr, cp vectors in SplineSpace constructor stored as left, rightand periodic field.\n\n\n\n\n\n","category":"type"},{"location":"#SpecialSpaces.UnivariateSplineSpaceConstraints-Tuple{}","page":"Home","title":"SpecialSpaces.UnivariateSplineSpaceConstraints","text":"UnivariateSplineSpaceConstraints()\n\nConstruct default UnivariateSplineSpaceConstraints\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.VectorFunctionSpace","page":"Home","title":"SpecialSpaces.VectorFunctionSpace","text":"abstract type VectorFunctionSpace{Dim,T}\n\nConcrete vector spaces like VectorSplineSpace subtype this.\n\nVector function spaces are expected to collect components as a tuple in field :V.\n\n\n\n\n\n","category":"type"},{"location":"#SpecialSpaces.VectorSplineSpace-Union{Tuple{T}, Tuple{Codim}, Tuple{Dim}, Tuple{VectorSplineSpace{Dim, Codim, T}, VectorSplineSpaceConstraints{Dim, Codim}}} where {Dim, Codim, T<:Real}","page":"Home","title":"SpecialSpaces.VectorSplineSpace","text":"VectorSplineSpace(degree::Degree, partition::Partition{Dim,T}) where {Dim,T<:Real}\nVectorSplineSpace(degrees::NTuple{Dim,Degree}, partition::Partition{Dim,T}) where {Dim,T<:Real}\nVectorSplineSpace(V::VectorSplineSpace{Dim,Codim,T}, C::VectorSplineSpaceConstraints{Dim,Codim}) where {Dim,Codim,T<:Real}\nVectorSplineSpace(S::ScalarSplineSpace{Dim,T}) where {Dim,T<:Real}\nVectorSplineSpace(V::NTuple{Codim,ScalarSplineSpace{Dim,T}}) where {Dim,Codim,T}\nVectorSplineSpace(V::Vararg{ScalarSplineSpace{Dim,T},Codim}) where {Dim,Codim,T}\n\nConstruct a VectorSplineSpace.\n\nConstraints on scalar spline space arguments are preserved.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.VectorSplineSpaceConstraints","page":"Home","title":"SpecialSpaces.VectorSplineSpaceConstraints","text":"struct ScalarSplineSpaceConstraints{Dim,T}\n\nContainer for ScalarSplineSpaceConstraints.\n\nField data stores a tuple of ScalarSplineSpaceConstraints for each component of VectorSplineSpace.\n\n\n\n\n\n","category":"type"},{"location":"#SpecialSpaces.VectorSplineSpaceConstraints-Union{Tuple{F}, Tuple{Codim}, Tuple{Dim}} where {Dim, Codim, F<:(VectorSplineSpace{Dim, Codim})}","page":"Home","title":"SpecialSpaces.VectorSplineSpaceConstraints","text":"VectorSplineSpaceConstraints(::F) where {Dim,Codim,F<:VectorSplineSpace{Dim,Codim}}\n\nConstruct a constraints container for a VectorSplineSpace.\n\n\n\n\n\n","category":"method"},{"location":"#SpecialSpaces.VectorSplineSpaceConstraints-Union{Tuple{}, Tuple{Dim}} where Dim","page":"Home","title":"SpecialSpaces.VectorSplineSpaceConstraints","text":"VectorSplineSpaceConstraints{Dim}() where {Dim}\nVectorSplineSpaceConstraints{Dim,Codim}() where {Dim,Codim}\nVectorSplineSpaceConstraints(args::Vararg{ScalarSplineSpaceConstraints{Dim},Codim}) where {Dim,Codim}\nVectorSplineSpaceConstraints{T}(args::Vararg{ScalarSplineSpaceConstraints{Dim},Codim}) where {Dim,Codim,T}\nVectorSplineSpaceConstraints{Dim,Codim,T}() where {Dim,Codim,T<:Integer}\n\nConstruct VectorSplineSpaceConstraints for a VectorSplineSpace of dimension Dim and codomain dimension Codim.\n\n\n\n\n\n","category":"method"}]
}
